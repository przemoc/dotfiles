[user]
	name = Przemyslaw Pawelczyk
	email = przemoc@gmail.com
[color]
	ui = true
[core]
	abbrev = 12
	autocrlf = false
	editor = vim
[sendemail]
	smtpserver = /usr/bin/msmtp
	suppresscc = self
	chainReplyTo = no
[alias]
	for-each-ref = for-each-ref
	rev-list     = rev-list
	rev-parse    = rev-parse
	symbolic-ref = symbolic-ref
	update-ref   = update-ref

	d      = diff --no-index
	g      = grep --no-index

	alt    = !$(git var GIT_EDITOR) $(git rev-parse --git-dir)/objects/info/alternates
	con    = !$(git var GIT_EDITOR) $(git rev-parse --git-dir)/config
	exc    = !$(git var GIT_EDITOR) $(git rev-parse --git-dir)/info/exclude

	br     = branch -v
	bv     = branch -vv
	ba     = branch -av
	bav    = branch -avv
	bn     = !git symbolic-ref -q HEAD | sed s,^refs/heads/,,

	up     = add -u

	ci     = commit
	cup    = commit -a
	ca     = commit --amend
	caup   = commit --amend -a
	cad    = !"f() { ADATE=\"$(git log -1 --pretty=format:'%ai')\"; GIT_COMMITTER_DATE=\"$ADATE\" git commit --amend \"$@\"; }; f"
	cadc   = !"f() { CDATE=\"$(git log -1 --pretty=format:'%ci')\"; GIT_COMMITTER_DATE=\"$CDATE\" git commit --amend --date=\"$CDATE\" \"$@\"; }; f"
	cadn   = !"f() { NDATE=\"$(date -R -d \"$*\")\"; GIT_COMMITTER_DATE=\"$NDATE\" git commit --amend --date=\"$NDATE\"; }; f"
	cadna  = !"f() { NDATE=\"$(date -R -d \"$*\")\"; CDATE=\"$(git log -1 --pretty=format:'%ci')\"; GIT_COMMITTER_DATE=\"$CDATE\" git commit --amend --date=\"$NDATE\"; }; f"
	cadnc  = !"f() { NDATE=\"$(date -R -d \"$*\")\"; GIT_COMMITTER_DATE=\"$NDATE\" git commit --amend; }; f"
	fixup  = commit --amend -C HEAD
	wip    = commit -m wip
	wup    = commit -a -m wip

	sw     = show
	scp    = show -C10 --find-copies-harder
	sww    = show --color-words

	reword = !"f() { GIT_EDITOR=\"sed -i 1s/pick/reword/\" git rebase -i $(git rev-parse \"$1\")~; }; f"
	edit   = !"f() { GIT_EDITOR=\"sed -i 1s/pick/edit/\" git rebase -i $(git rev-parse \"$1\")~; }; f"
	sq     = !"f() { git commit -m\"squash! $(git log -1 --pretty=%s $(git rev-parse \"$1\"))\"; }; f"
	fix    = !"f() { git commit -m\"fixup! $(git log -1 --pretty=%s $(git rev-parse \"$1\"))\"; }; f"
	fixed  = rebase -i --autosquash

	rb     = rebase
	rc     = rebase --continue
	ri     = rebase -i
	rskip  = rebase --skip

	fe     = fetch
	fa     = fetch --all
	fap    = fetch --all -p
	pf     = pull --ff-only

	co     = checkout

	pack   = repack -d -l
	packall= repack -A -d -l
	unreach= fsck --unreachable
	cos    = count-objects
	pcos   = !"f() { if [ -n \"$1\" ]; then cd \"$1\"; fi; printf \"%-60s %19s\\n\" \"$(pwd)\" \"$(git cos)\"; }; f"
	pps    = !"f() { if [ -n \"$1\" ]; then cd \"$1\"; fi; printf \"%-60s %7s %s\\n\" \"$(pwd)\" \"$(git size | awk '{print$1}')\" \"$(ls -t $(git rev-parse --git-dir)/objects/pack/*.pack | xargs du -k -c | tac | awk 'NR==1{t=$1}NR!=1{printf\" %6.2f%%\",100*$1/t}')\"; }; f"
	size   = !du -s $(git rev-parse --git-dir)

	stats  = !"f() { git ls-files -z | xargs -0 -n1 -I@ sh -c \"git blame -wtCC '@' | sed 's,^[^(]\\+,,;s,[ \\t]\\+[0-9]\\+ +[0-9]\\+[^)]\\+,,;/^([^)]\\+)[ \\t]*[{};*\\/]*[ \\t]*\\r\\?$/d' | sed 's,).*,),'\" | sort | uniq -c; }; f"

	qs     = !echo staged: && git diff --cached --name-status && echo unstaged: && git diff --name-status
	st     = status -uno
	sta    = status

	dl     = !GIT_PAGER='less -+$LESS -RS' git diff
	dc     = diff --cached
	dcw    = !GIT_PAGER='less -+$LESS -R' git diff --cached --color-words
	dcp    = diff -C10 --find-copies-harder
	df     = diff
	dh     = diff --histogram
	dp     = diff --patience
	db     = diff -U10
	dbb    = diff -U100
	dw     = !GIT_PAGER='less -+$LESS -R' git diff --color-words
	wc     = whatchanged

	last   = !"f() { B=\"$(git bn)\"; B=\"${B:-HEAD}\"; if [ \"$1\" != \"--\" ]; then B=\"${1:-$B}\"; if [ $# -gt 0 ]; then shift; fi; fi; git log -p --reverse $B@{1}..$B@{0} \"$@\"; }; f"
	ldc    = log HEAD@{1}..HEAD@{0} --reverse --stat -p
	wn     = log --reverse ORIG_HEAD..HEAD
	cf     = !"f() { FROM=\"$(git rev-parse $1)\"; TO=\"$(git rev-parse $2)\"; git log --name-status --pretty=oneline $FROM..${TO:-HEAD} | sed '/^[A-Z]\\+\\t/!d;s///'; }; f"

	la     = log --graph --decorate --abbrev-commit --all
	lf     = log --pretty=fuller --date=iso8601
	lo     = log
	lp     = log -p
	lpp    = log -p --patience
	lpr    = log -p --reverse
	lod    = log --pretty=format:'%C(yellow)%h %Cred%ad %Creset%s%Cgreen%d' --date=iso
	lodd   = log --pretty=format:'%C(yellow)%h %Cred%ad %Creset%s%Cgreen%d' --date=iso --date-order --graph
	lodda  = log --pretty=format:'%C(yellow)%h %Cred%ad %Creset%s%Cgreen%d' --date=iso --author-date-order --graph
	loda   = log --pretty=format:'%C(yellow)%h%x09%Cred%ad %Creset%s%Cgreen%d' --date=iso --all --graph
	sl     = shortlog
	sls    = shortlog -s
	datelog= log --abbrev=12 --pretty=format:'%h | %ad | %s' --date=iso

	pick   = cherry-pick

	gr     = grep
	gru    = grep --untracked

	sf     = svn fetch
	sr     = svn rebase

	rmrem  = !git ls-files --deleted -z | xargs -0 git rm --
	ts     = !"git for-each-ref --format='%(taggerdate:raw)%(committerdate:raw) %(refname:short)' refs/tags | awk '{if (NF==3) print($1-(($2/100)*3600),$3); else print($1)}' | sort -n"

	k      = !gitk
	mt     = mergetool

# Scott Chacon
	lol    = log --graph --decorate --pretty=oneline --abbrev-commit
	lold   = log --graph --decorate --pretty=oneline --abbrev-commit --date-order
	lolda  = log --graph --decorate --pretty=oneline --abbrev-commit --author-date-order
	lola   = log --graph --decorate --pretty=oneline --abbrev-commit --all
	lolad  = log --graph --decorate --pretty=oneline --abbrev-commit --all --date-order
	lolada = log --graph --decorate --pretty=oneline --abbrev-commit --all --author-date-order
	lolahg = log --graph --decorate --pretty=oneline --abbrev-commit --all ^refs/notes/hg
	loladhg= log --graph --decorate --pretty=oneline --abbrev-commit --all --date-order ^refs/notes/hg
# Peter Collingbourne <peter@pcc.me.uk>
	svnmu  = "!f() { git fetch $1 && git update-ref refs/remotes/git-svn $1/master && git svn fetch }; f"

[pack]
	window = 256
	window-memory = 2g
[pull]
	ff = only
[push]
	default = nothing
[remote-hg]
	hg-git-compat = true
[tag]
	sort = v:refname
[credential]
	helper = cache
[include]
	path = ~/.gitconfig.local
